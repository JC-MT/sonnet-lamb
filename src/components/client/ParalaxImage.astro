---
const { imageSrc, imageAlt } = Astro.props;
---

<paralax-image>
  <picture>
    <source
      media="(max-width: 400px)"
      srcset=`
        ${imageSrc}&width=400 1x, 
        ${imageSrc}&width=800 2x
      `
    />
    <source
      media="(max-width: 500px)"
      srcset=`
        ${imageSrc}&width=500 1x, 
        ${imageSrc}&width=1000 2x
      `
    />
    <source media="(max-width: 600px)" srcset=`${imageSrc}&width=600` />
    <source media="(max-width: 700px)" srcset=`${imageSrc}&width=700` />
    <source media="(max-width: 800px)" srcset=`${imageSrc}&width=800` />
    <source media="(max-width: 900px)" srcset=`${imageSrc}&width=900` />
    <source media="(min-width: 901px)" srcset=`${imageSrc}&width=1000` />
    <img
      parallax-image
      class="w-full object-cover relative z-10 md:-z-10 md:translate-y-[-100px]"
      src=`${imageSrc}&width=850`
      alt={imageAlt}
      loading="eager"
      width="auto"
      height="auto"
    />
  </picture>
</paralax-image>

<script>
  class ParallaxImage extends HTMLElement {
    private target: HTMLElement | null = null;
    private handleScroll: () => void = () => {};

    connectedCallback() {
      this.target = this.querySelector("[parallax-image]");
      if (!this.target || window.innerWidth < 768) return;

      this.handleScroll = this.throttle(() => this.applyParallax());
      window.addEventListener("scroll", this.handleScroll, { passive: true });
    }

    applyParallax() {
      if (!this.target) return;
      const speed = 0.715 + window.scrollY / 20 / 1000;
      this.target.style.transform = `translateY(${window.scrollY * speed}px)`;
    }

    throttle(cb: Function) {
      let waiting = false;
      return () => {
        if (!waiting) {
          cb();
          waiting = true;
          requestAnimationFrame(() => (waiting = false));
        }
      };
    }

    disconnectedCallback() {
      window.removeEventListener("scroll", this.handleScroll);
    }
  }

  customElements.define("paralax-image", ParallaxImage);
</script>
